# src/test/resources/application.properties

# --- Application Name & Port (테스트에서는 크게 중요하지 않음) ---
spring.application.name=sellog-test
server.port=8080 
# 테스트에서 실제 포트 바인딩은 하지 않음

# --- H2 Database (인메모리 데이터베이스 사용) ---
# 로컬 테스트 시에는 실제 외부 MariaDB 대신 인메모리 H2 데이터베이스를 사용합니다.
# H2 인메모리 DB는 애플리케이션 실행 중 메모리에만 존재하며, 애플리케이션 종료 시 모든 데이터가 사라집니다.
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

# --- JPA & Hibernate (테스트를 위한 설정) ---
# 테스트 실행 시마다 테이블을 자동 생성합니다.
# "none"으로 설정하면 DDL 자동 생성을 하지 않아 테스트 환경 구성이 어렵고,
# "update"는 기존 스키마를 업데이트하려고 시도하여 불확실성을 높일 수 있습니다.
# "create-drop"은 테스트 시작 시 스키마 생성, 종료 시 삭제하여 깨끗한 환경을 보장합니다.
spring.jpa.hibernate.ddl-auto=create-drop

# SQL 쿼리를 콘솔에 출력하여 테스트 시 어떤 쿼리가 실행되는지 확인합니다.
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
# H2는 MariaDBDialect 대신 H2Dialect를 사용합니다.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Hibernate Spatial을 사용한다면 H2 Spatial Dialect를 명시합니다. (필요 시)
# spring.jpa.properties.hibernate.dialect=org.hibernate.spatial.dialect.h2.H2GISDialect

# --- Redis (Embedded Redis 사용 또는 비활성화) ---
# 로컬 테스트 시에는 실제 Redis 서버에 의존하지 않도록 Embedded Redis를 사용하거나,
# Redis 관련 로직을 Mocking하여 테스트합니다.
# Embedded Redis는 별도 의존성(de.flapdoodle.embed:de.flapdoodle.embed.redis) 추가 및 설정 필요.
# 또는 Redis 포트를 임의의 -1 등으로 설정하여 연결 시도를 방지할 수 있습니다.
# 여기서는 포트를 0으로 설정하여 Spring Data Redis가 임의의 사용 가능한 포트를 찾도록 하거나,
# 아니면 Redis 관련 로직이 없거나 Mock 처리된다고 가정하여 간단히 주석 처리합니다.
# 일반적으로 단위/통합 테스트에서 실제 Redis를 띄우는 것은 리소스 소모가 큽니다.
spring.data.redis.host=localhost
spring.data.redis.port=6379
 # Embedded Redis 사용 시 여기에 임의 포트 (0) 또는 설정으로 사용


# --- JWT (테스트용 간소화) ---
# 실제 Secret Key 대신 테스트용 짧은 키를 사용합니다.
jwt.secret=test_jwt_secret_for_local_testing_only 
# 실제 시크릿 키는 너무 길어서 테스트용으로 짧게
jwt.access-token-expiration-ms=300000 
# 5분 (테스트 용도로 짧게)
jwt.refresh-token-expiration-ms=600000 
# 10분 (테스트 용도로 짧게)

# --- Springdoc OpenAPI UI (테스트에서는 보통 불필요하여 비활성화) ---
# 테스트 환경에서는 Swagger UI가 필요 없으므로 비활성화합니다.
springdoc.api-docs.enabled=false
springdoc.swagger-ui.enabled=false

# --- 파일 업로드 (테스트에서는 실제 파일 시스템/스토리지 접근 최소화) ---
# 멀티파트 파일 사이즈 제한은 테스트에서는 무의미하거나, 특정 유닛 테스트에만 필요할 수 있습니다.
# 여기서는 기본값 또는 Mocking을 고려하여 주석 처리합니다.
# spring.servlet.multipart.max-file-size=300MB

# --- Azure Storage (테스트 시에는 Mocking/Stubbing 필요) ---
# 실제 Azure Storage 계정에 연결하는 대신, 관련 서비스를 Mocking하거나,
# 테스트에 필요한 최소한의 더미 값을 사용해야 합니다.
# 연결 문자열을 비워두거나 더미 값을 넣으면 연결 시도를 방지할 수 있습니다.
# 또는 @MockBean 등으로 Azure Storage 클라이언트를 대체해야 합니다.
# azure.storage.connection-string=dummy-test-connection-string
# azure.storage.input-container-name=test-input-container
# azure.storage.output-container-name=test-output-container